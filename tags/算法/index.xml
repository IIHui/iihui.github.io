<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on Keep It Simple</title>
    <link>https://iihui.github.io/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on Keep It Simple</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 31 Dec 2018 09:21:01 +0000</lastBuildDate>
    
	<atom:link href="https://iihui.github.io/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>基本内排序算法Swift实现</title>
      <link>https://iihui.github.io/post/swift-sort/</link>
      <pubDate>Mon, 31 Dec 2018 09:21:01 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-sort/</guid>
      <description>排序就是重新排列表中的元素，使表中的元素满足按关键字递增或者递减的排列过程。排序算法分为内排序和外排序。内排序是指排序期间元素全部放在内存中的排序；而外排序是指在排序期间元素太多，不能同时全部存放在内存中，必须在排序过程中根据要求，不断在内</description>
    </item>
    
    <item>
      <title>线性表</title>
      <link>https://iihui.github.io/post/arith-linear-list/</link>
      <pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/arith-linear-list/</guid>
      <description>线性表是由 $n$个具有相同特性的元素$(n \ge 0)$ 组成的一个有限序列，是一种逻辑结构。它的特征在于：①表中所有数据元素类型相同。②表由有限个数据元素构成。③表中数据元素是位置相关的（这一点表明线性表不同于集合)，并且每个元素都有一个对应的序号，</description>
    </item>
    
    <item>
      <title>位运算</title>
      <link>https://iihui.github.io/post/arith-bits/</link>
      <pubDate>Sat, 28 Oct 2017 11:12:12 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/arith-bits/</guid>
      <description>判断是否为2的n次方 对于正整数来说，如果一个数为$x=2^n$,那么必然有一位为1，右边其它位全为0。那么$(x-1)$在其对应为1的位置上为0，对应位右边全部为1。因此，x&amp;amp;(x-1)的值则为0。 // 要求x是正整数 (x&amp;amp;(x-1) == 0) 位运算实现加</description>
    </item>
    
    <item>
      <title>败者树</title>
      <link>https://iihui.github.io/post/arith-loser-tree/</link>
      <pubDate>Fri, 29 Sep 2017 21:09:50 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/arith-loser-tree/</guid>
      <description>胜者树和败者树都是完全二叉树，是树形选择排序的一种变型。每个叶子结点相当于一个选手，每个中间结点相当于一场比赛，每一层相当于一轮比赛。不同的是，胜者树的中间结点记录的是胜者的标号；而败者树的中间结点记录的败者的标号。胜者树与败者树都可以在$</description>
    </item>
    
    <item>
      <title>剑指offer题集1</title>
      <link>https://iihui.github.io/post/arith-sword-1/</link>
      <pubDate>Wed, 16 Aug 2017 09:46:10 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/arith-sword-1/</guid>
      <description>二维数组中查找 在一个二维数组中，每一行都按从左到右递增的顺序排序，每一列都按从上到下递增的顺序排列，试从该二维数组查找给定的元素。 首先应该从右上角的元素(记为cur)开始比较，如果当前要查找的元素key的值比cur大，那么就应该往cur所在</description>
    </item>
    
    <item>
      <title>基本排序算法</title>
      <link>https://iihui.github.io/post/arith-sort/</link>
      <pubDate>Tue, 23 May 2017 17:54:57 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/arith-sort/</guid>
      <description>基本概念 排序算法的稳定性：如果待排序的数据中，存在多个关键字相同的元素，经过排序后这些具有相同关键字的元素之间的相对次序保持不变，则称这种排序算法是稳定的，反之则为不稳定。 内排序：排序过程中，整个表都是放在内存中处理，排序时不涉及数据的内、</description>
    </item>
    
  </channel>
</rss>