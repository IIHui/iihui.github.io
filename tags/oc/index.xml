<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>oc on Keep It Simple</title>
    <link>https://iihui.github.io/tags/oc/</link>
    <description>Recent content in oc on Keep It Simple</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 13 Feb 2020 13:10:08 +0000</lastBuildDate><atom:link href="https://iihui.github.io/tags/oc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>KVC 键值编码</title>
      <link>https://iihui.github.io/post/ios-kvc/</link>
      <pubDate>Thu, 13 Feb 2020 13:10:08 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-kvc/</guid>
      <description>KVC(Key Value Coding)键值编码，指允许通过Key名字来直接访问对象的属性，而不需要调用明确的存取方法。这样，便能在运行时动态地访问和修改对象的属性值。在iOS中，无论是Swift还是OC，KVC都是通过对NSObject的扩展来实现的。所以，继</description>
    </item>
    
    <item>
      <title>iOS 可视化埋点</title>
      <link>https://iihui.github.io/post/ios-log-point/</link>
      <pubDate>Sun, 09 Feb 2020 16:54:52 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-log-point/</guid>
      <description>埋点方案大体上可以归为3类：代码埋点，可视化埋点，无埋点。代码埋点，由开发人员在触发事件的具体方法里，植入多行代码把需要上传的数据发送至服务端。可视化埋点，根据标识来识别每一个事件，针对指定的事件进行取参埋点。而事件的标识与参数信息都写在配</description>
    </item>
    
    <item>
      <title>Objective-C Runtime</title>
      <link>https://iihui.github.io/post/oc-runtime/</link>
      <pubDate>Tue, 04 Feb 2020 13:15:10 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/oc-runtime/</guid>
      <description>Objective-C扩展了C语言，并加入了面向对象特性和Smalltalk式的消息传递机制。而这个扩展的核心是一个用C写的Runtime库，它是OC面向对象和动态机制的基石。OC的Runtime用于创建类对象、进行消息传递和转发。理解OC</description>
    </item>
    
    <item>
      <title>KVO 介绍</title>
      <link>https://iihui.github.io/post/ios-kvo/</link>
      <pubDate>Mon, 17 Dec 2018 15:09:08 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-kvo/</guid>
      <description>在应用开发中，经常需要使用观察者模式，以监听某些对象属性的变化，然后进行相应操作。OC提供了一套简洁优雅的观察方式——KVO。KVO(key-value observing)是一种通知机制，当指定的被观察者对象的属性被修改时，KVO会自动通知</description>
    </item>
    
    <item>
      <title>OC 入门</title>
      <link>https://iihui.github.io/post/oc-tour/</link>
      <pubDate>Wed, 19 Sep 2018 14:29:51 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/oc-tour/</guid>
      <description>Objective-C简称OC， 是C语言的严格超集——任何C语言程序不经过修改都可以直接通过OC的编译器，在OC中使用C语言代码也是完全合法的。OC被描述为覆盖在C语言上的一层，因为OC的原意就是在C语言的主体上加入面向对象的特性。 文件扩展</description>
    </item>
    
  </channel>
</rss>
