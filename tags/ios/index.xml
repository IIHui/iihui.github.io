<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS on Keep It Simple</title>
    <link>https://iihui.github.io/tags/ios/</link>
    <description>Recent content in iOS on Keep It Simple</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 28 Aug 2021 19:45:24 +0000</lastBuildDate><atom:link href="https://iihui.github.io/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一些问题的解决方案</title>
      <link>https://iihui.github.io/post/ios-solutions/</link>
      <pubDate>Fri, 16 Jul 2021 17:34:07 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-solutions/</guid>
      <description>在开发过程中，会遇到各种问题，有时候某个问题当时已经找到了解决方案，但过了一段时间又可能会忘记。这篇文章记录一些问题的解决方案，以便后续查找。 强制竖屏 最近在使用其它SDK，业务方要求打开其中的某个页面时强制竖屏，但发现按对方要求传了相应参数</description>
    </item>
    
    <item>
      <title>iOS 14 编程基础</title>
      <link>https://iihui.github.io/post/ios-fundamentals/</link>
      <pubDate>Sat, 28 Aug 2021 19:45:24 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-fundamentals/</guid>
      <description>Object 在Swift中，万物皆为对象，这是什么意思呢？这取决于所说的「对象」是什么，以及所说的「万物」是什么意思。粗略地说，对象就是可以向其发送消息的东西，而消息就是一个命令式的指令。在Swift中，发送消息的语法是点表示法：以对象开始，然后紧跟</description>
    </item>
    
    <item>
      <title>Swift协议</title>
      <link>https://iihui.github.io/post/ios-protocol/</link>
      <pubDate>Sat, 07 Aug 2021 12:24:59 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-protocol/</guid>
      <description>2015年苹果声称Swift是第一个面向协议的编程语言。从它的名字来看，很可能会认为面向协议编程都是关于协议的，但这是不正确的。面向协议的编程所涉及的不仅仅是协议，它实际上是一种新的方式，不仅是编写应用程序，而且是我们如何思考应用程序的设计</description>
    </item>
    
    <item>
      <title>KingFisher 使用</title>
      <link>https://iihui.github.io/post/ios-kingfisher/</link>
      <pubDate>Fri, 30 Jul 2021 16:33:01 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-kingfisher/</guid>
      <description>最近App联系人头像改成了url的形式，不再使用带大堆信息的post请求。因为头像涉及到缓存和更新机制，因此需要使用KingFisher组件。 设置图片 如果想要设置UIImageView的图片，则可以使用KingFisher的扩展方法xxx.</description>
    </item>
    
    <item>
      <title>使用Leaks内存检测</title>
      <link>https://iihui.github.io/post/ios-leaks/</link>
      <pubDate>Fri, 09 Jul 2021 21:55:28 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-leaks/</guid>
      <description>最近有用户反馈App出现了闪退现象，但后台并未发现有崩溃日志上传，猜测发生了内存溢出，导致App直接被系统杀掉而没有崩溃日志产生。为了验证此猜测，需要使用XCode的Leaks工具，这篇文章简单介绍使用Leaks的步骤。 Setting 首先在XCode的</description>
    </item>
    
    <item>
      <title>视图</title>
      <link>https://iihui.github.io/post/ios-views/</link>
      <pubDate>Fri, 28 May 2021 23:17:52 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-views/</guid>
      <description>视图view的层次结构是其组织的主要模式。一个视图可以有多个子视图，但只能有一个直接父视图。若一个视图被从界面中被移除，则它的子视图也会被移除；若一个视图被隐藏，则它的子视图都会被隐藏；如果一个视图被移动，它的子视图也都会随之移动。也就是说</description>
    </item>
    
    <item>
      <title>Swift 5.3 新特性</title>
      <link>https://iihui.github.io/post/swift-5.3/</link>
      <pubDate>Sat, 08 May 2021 08:52:46 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-5.3/</guid>
      <description>Swift 5.3引入了很多新特性，包括多尾闭包、多模式catch、枚举比较、闭包中self省略以及Swift Package Manager等一些重要改变。 多尾闭包 以前 在Swift 5.3前尾闭包提供了精简写法，但仅限于函数最后一个参数为函数闭包。而当函数有多个函数</description>
    </item>
    
    <item>
      <title>Swift 5.2 新特性</title>
      <link>https://iihui.github.io/post/swift-5.2/</link>
      <pubDate>Thu, 06 May 2021 23:01:46 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-5.2/</guid>
      <description>Swift 5.2于2020.03.24发布，新增了许多新的特性，专注于改善开发体验并增加了一些新功能，新功能大部分以增强函数式编程风格为导向。 KeyPath 在Swift 5.2中允许使用key path表达式替代key path函数。下面的代码中，使用了cars.f</description>
    </item>
    
    <item>
      <title>Xcode编译报错问题</title>
      <link>https://iihui.github.io/post/ios-compiler/</link>
      <pubDate>Wed, 05 May 2021 10:06:46 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-compiler/</guid>
      <description>xxx-Swift.h未找到 如果报xxx-Swift.h未找到，则需要检查设置中的Swift Compiler - General下的Objective-C Generated Interface Header Name是否有对应的文件： iOS 14.5.1编译报错 使用XCode 12.4在iOS 14.5.1的真机上</description>
    </item>
    
    <item>
      <title>iOS</title>
      <link>https://iihui.github.io/post/ios-14/</link>
      <pubDate>Sun, 02 May 2021 18:42:28 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-14/</guid>
      <description>添加初始ViewController 设置初始的ViewController有两种方式，第一种是在属性检测器中勾选Is Initial View Controller，如下图所示： 第二种方式则是按住鼠标左键，然后直接拖动代表初始ViewController的蓝色箭头</description>
    </item>
    
    <item>
      <title>Swift 基础</title>
      <link>https://iihui.github.io/post/swift-base/</link>
      <pubDate>Sun, 02 May 2021 09:06:07 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-base/</guid>
      <description>语句 一个Swift文件包含多行文本。换行对于Swift来说是有意义的，代表一条语句的结束，因此Swift中一般一行只写一条语句。如果需要在一行中写多条语句，则需要分号隔开，但不推荐这样做。 print(&amp;#34;hello&amp;#34;) print(&amp;#34;world&amp;#34;) print(&amp;#34;hello&amp;#34;); print(&amp;#34;world&amp;#34;) 常量和变量 Swift的常量或者变量使用前必须</description>
    </item>
    
    <item>
      <title>UISearchController</title>
      <link>https://iihui.github.io/post/ios-uisearchcontroller/</link>
      <pubDate>Sun, 25 Apr 2021 11:44:21 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-uisearchcontroller/</guid>
      <description>苹果 解决 // 先override viewDidLayoutSubviews方法 override func viewDidLayoutSubviews() { super.viewDidLayoutSubviews() super.setNavigationBarHidden(true, animated: false) } // 然后再push的时候关闭动画 from.navigationController?.pushViewController(vc, animated: true)</description>
    </item>
    
    <item>
      <title>Moya</title>
      <link>https://iihui.github.io/post/ios-moya/</link>
      <pubDate>Fri, 16 Apr 2021 10:49:11 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-moya/</guid>
      <description>Moya是一个高度抽象的网络库，它的目标是让使用者不必关心网络请求的底层实现细节，只需要关注业务。Moya采用桥接和组合来进行封装，默认桥接了Alamofire。Moya具有很强的扩展性，可以轻松地将RxSwift、PromiseKit和O</description>
    </item>
    
    <item>
      <title>MDM</title>
      <link>https://iihui.github.io/post/tool-mdm/</link>
      <pubDate>Thu, 15 Apr 2021 22:10:22 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/tool-mdm/</guid>
      <description>MDM是Moblie Device Management移动设备管理的简称，目的就是让企业能够方便的管理iPhone和Pad等移动设备。当企业大量的使用移动设备办公或涉及到一些安全限制时设备管理的作用就能明显的体现出来，通过MDM，IT人员能够在企业环境</description>
    </item>
    
    <item>
      <title>iOS PWA</title>
      <link>https://iihui.github.io/post/ios-pwa/</link>
      <pubDate>Mon, 12 Apr 2021 12:02:24 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-pwa/</guid>
      <description>PWA PWA（Progressive web apps）译为渐进式Web应用，指的是运用现代的Web API以及传统的渐进式增强策略来创建跨平台Web应用程序。PWA没有统一的定义，可以理解为使用Web技术来创建App，不用打包，不用签名，可以离线工作，</description>
    </item>
    
    <item>
      <title>Programming for Beginners</title>
      <link>https://iihui.github.io/post/ios-beginner/</link>
      <pubDate>Fri, 26 Mar 2021 19:01:33 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-beginner/</guid>
      <description>Xcode界面 工具栏：用于构建和运行应用程序，以及查看运行任务的进度。 导航区：提供对项目各个部分的快速访问，默认情况下会显示项目导航器。 编辑器区：允许编辑源代码、用户界面和其他资源。 检查器区：允许查看和编辑在导航器区域或编辑器区域中选择的项</description>
    </item>
    
    <item>
      <title>AES 实现</title>
      <link>https://iihui.github.io/post/ios-aes/</link>
      <pubDate>Wed, 17 Mar 2021 17:24:04 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-aes/</guid>
      <description>高级加密标准(AES,Advanced Encryption Standard)，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用是最常见的对称加密算法，它是一种对称加密算法（对称加密是指加密和解密使用相同的密</description>
    </item>
    
    <item>
      <title>Cookie简介</title>
      <link>https://iihui.github.io/post/cookie/</link>
      <pubDate>Sat, 20 Feb 2021 19:05:10 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/cookie/</guid>
      <description>简介 标准的http协议是无状态的，即服务端对于客户端的每次请求都认为它是一个新的请求，上一次的会话和下一次的会话之间没有任何联系。当用户访问服务端并进行登录后，之后的客户端请求服务端依然无法对其身份进行识别。如果将客户端与服务器之间的多次交</description>
    </item>
    
    <item>
      <title>UIView 使用</title>
      <link>https://iihui.github.io/post/ios-uiview/</link>
      <pubDate>Sun, 07 Feb 2021 12:53:06 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-uiview/</guid>
      <description>layoutIfNeeded与setNeedsLayout setNeedsLayout setNeedsLayout当需要调整UIView子视图布局时，需要在主线程调用此方法。此方法记录调整布局请求并立即返回「即异步执行」，等待下一个更新周期更新视图。也就是说，这个方</description>
    </item>
    
    <item>
      <title>PromiseKit使用</title>
      <link>https://iihui.github.io/post/ios-promisekit/</link>
      <pubDate>Wed, 03 Feb 2021 10:33:04 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-promisekit/</guid>
      <description>PromiseKit是简化异步编程的一种非必要方式，使用它可以提高代码的可读性和维护性，让代码更加优雅，它主要用于解决回调地狱问题。 回调地狱 为了保证异步代码按顺序执行，通常将异步代码嵌套在回调函数中。如果异步方法过多，就会产生过多的回调，一</description>
    </item>
    
    <item>
      <title>属性包装</title>
      <link>https://iihui.github.io/post/ios-propertywrapper/</link>
      <pubDate>Fri, 08 Jan 2021 18:19:29 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-propertywrapper/</guid>
      <description>属性包装器propertyWrapper的作用对象是属性，它的思想是只可以通过wrappedValue的get和set方法来访问属性，这样就可以通过get和set方法来对属性进行包装，提供特定功能的属性。属性包装器是一种通用结构，它封装了w</description>
    </item>
    
    <item>
      <title>调试</title>
      <link>https://iihui.github.io/post/ios-debug/</link>
      <pubDate>Mon, 04 Jan 2021 14:15:45 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-debug/</guid>
      <description>LLDB LLDB是一个庞大的工具,内置了许多有用的命令。 命令语法结构 &amp;lt;command&amp;gt; [&amp;lt;subcommand&amp;gt; [&amp;lt;subcommand&amp;gt;...]] &amp;lt;action&amp;gt; [-options [option-value]] [argument [argument...]] 其中： command和subcommand为LLDB调试命令的名称，命令和子命令按照层级结构来排列：一个命令对象为跟随其的子命令对象创建一个上下文，子命令又为其子</description>
    </item>
    
    <item>
      <title>KSCrash</title>
      <link>https://iihui.github.io/post/ios-kscrash/</link>
      <pubDate>Sat, 26 Dec 2020 17:33:11 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-kscrash/</guid>
      <description>KSCrash是知名的崩溃日志收集框架。总共分为三个部分，Crash Recording，Crash Reporting以及Installation。其中Installation用来启动KSCrash，并且指定Crash收集的方式。Crash收</description>
    </item>
    
    <item>
      <title>Shell 常用命令</title>
      <link>https://iihui.github.io/post/shell-base/</link>
      <pubDate>Sun, 29 Nov 2020 10:50:55 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/shell-base/</guid>
      <description>本文记录工作中用的shell命令，以便下次使用的时候查阅。 软链接 创建 ln ~/.cocoapods/repos-art/CocoaPods-cmb ~/.cocoapods/repos 删除 unlink cocoaPods-github</description>
    </item>
    
    <item>
      <title>Python 基础</title>
      <link>https://iihui.github.io/post/python-base/</link>
      <pubDate>Mon, 23 Nov 2020 23:36:18 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/python-base/</guid>
      <description>字符串 在python中，用引号括起来的都是字符串，其中的引号可以是单引号，也可以是双引号。对于字符串，title()函数以首字母大写的方式显示每个单词；upper()函数将字符串全部转为大写；lower()函数将字符串全部转为小写。 lstr</description>
    </item>
    
    <item>
      <title>Swift Tips</title>
      <link>https://iihui.github.io/post/swift-tips/</link>
      <pubDate>Thu, 12 Nov 2020 08:27:33 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-tips/</guid>
      <description>柯里化 柯里化(curry)：把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下参数而且返回结果的新函数。 func addTo(_ adder: Int) -&amp;gt; (Int) -&amp;gt; Int { return { num in return num + adder } } let addTwo = addTo(2) // addTwo: Int -&amp;gt; Int let result = addTwo(6) // result = 8 柯⾥化是⼀种量产相似⽅法</description>
    </item>
    
    <item>
      <title>使用charles</title>
      <link>https://iihui.github.io/post/tool-charles/</link>
      <pubDate>Fri, 18 Sep 2020 10:09:24 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/tool-charles/</guid>
      <description>charles是一款用于iOS抓包的工具，可以将它设置成网络访问的代理服务器，使得所有网络访问请求都通过它来完成，从而实现网络封包的截取和分析，以作为网络访问的监视器。当App连接charles代理访问互联网时，charles可以监控这个A</description>
    </item>
    
    <item>
      <title>刘海屏适配</title>
      <link>https://iihui.github.io/post/ios-layout/</link>
      <pubDate>Mon, 17 Aug 2020 08:00:07 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-layout/</guid>
      <description>自从苹果推出刘海屏之后，App开发就要做相应的适配，适配过程通常会用到topLayoutGuide和bottomLayoutGuide或者safeAreaLayoutGuide。topLayoutGuide和bottomLayoutGuid</description>
    </item>
    
    <item>
      <title>UITabBarController</title>
      <link>https://iihui.github.io/post/ios-uitabbar/</link>
      <pubDate>Sun, 02 Aug 2020 21:04:47 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-uitabbar/</guid>
      <description>添加Tab 既可以直接添加UITabBarController到storyboard中，也可以在现有的ViewController中添加UITabBarController。 直接添加 如下图所示，在Xcode 12右上角点击+号，然后输入Tab，</description>
    </item>
    
    <item>
      <title>snapkit 使用</title>
      <link>https://iihui.github.io/post/ios-snapkit/</link>
      <pubDate>Fri, 31 Jul 2020 10:10:07 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-snapkit/</guid>
      <description>inset和offset 在描述view与superview关系时，应该使用inset，而描述view与同一层级的其它view时，应该使用offset。 使用offset来设置距离子控件相对于父控件边距时，对于右边和下方的约束都需要加-号。这和</description>
    </item>
    
    <item>
      <title>富文本</title>
      <link>https://iihui.github.io/post/ios-richtext/</link>
      <pubDate>Wed, 29 Jul 2020 18:59:27 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-richtext/</guid>
      <description>在文字后面添加红点 /// 使用富文本的方式在UILabel文本后面添加红点 /// - Parameter add: isNeedAdd 为true表示要加红点，否则不需要 /// - Returns: 处理后的富文本 func addRedDot(isNeedAdd: Bool) -&amp;gt; NSMutableAttributedString { var text: String = (self.text ?? &amp;#34;&amp;#34;) if isNeedAdd { text += &amp;#34; &amp;#34; let contentText = NSMutableAttributedString(string: text) let attach = NSTextAttachment() let dotImg = UIImage(named: &amp;#34;reddot&amp;#34;) let width: CGFloat = 10 attach.bounds = CGRect(x: 0, y: 0.5, width: width, height: width) attach.image = dotImg let attrText</description>
    </item>
    
    <item>
      <title></title>
      <link>https://iihui.github.io/post/ios-customizeuiview/</link>
      <pubDate>Fri, 03 Jul 2020 16:54:07 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-customizeuiview/</guid>
      <description>class RecommendView: UIView { @IBOutlet weak var imageView: UIImageView! @IBOutlet weak var subTitleLbl: UILabel! @IBOutlet weak var titleLbl: UILabel! @IBOutlet var contentView: UIView! override init(frame: CGRect) { //每一步都必须实现父初始化 super.init(frame: frame) contentView = loadViewFromNib() contentView.frame = bounds addSubview(contentView) } //可视化IB初始化调用 required init?(coder aDecoder: NSCoder) { super.init(coder: aDecoder) contentView = loadViewFromNib() contentView.frame = bounds addSubview(contentView) } //MARK：自定义方法 func loadViewFromNib() -&amp;gt; UIView { let nib = UINib(nibName: String(describing: RecommendView.self), bundle: Bundle(for: RecommendView.self)) let view = nib.instantiate(withOwner: self, options: nil)[0] as! UIView return view } } 参考资</description>
    </item>
    
    <item>
      <title>Swift 范型</title>
      <link>https://iihui.github.io/post/swift-generirs/</link>
      <pubDate>Tue, 30 Jun 2020 08:58:17 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-generirs/</guid>
      <description>范型类型 Swift允许自定义的范型类型包括类、结构体、枚举类型。 struct Stack { var items = [Int]() mutating func push(_ item:Int){ items.append(item) } mutating func pop(_ item:Int) -&amp;gt; Int { return items.removeLast() } } //调用 var stack_int = Stack() stack_int.push(7) stack_int.push(3) stack_int.push(2) print(stack_int)//Stack(items: [7, 3, 2]) 类型约束 范型函数和范型类型虽然可以和任何类型一起使用，但有时需要限制使用的类型，此时就需要使用类型</description>
    </item>
    
    <item>
      <title>Swift中defer</title>
      <link>https://iihui.github.io/post/swift-defer/</link>
      <pubDate>Sun, 28 Jun 2020 09:25:49 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-defer/</guid>
      <description>从语言设计上来说，defer是为了进行资源清理和返回前避免重复执行相关的代码，而不是用来取巧的实现某些功能，这样做只会让代码的可读性降低。 典型用法 Swift中defer声明的block会在当前代码执行退出后调用，这种延迟调用特性，一般用来进</description>
    </item>
    
    <item>
      <title>屏幕旋转</title>
      <link>https://iihui.github.io/post/ios-rotate/</link>
      <pubDate>Mon, 08 Jun 2020 20:07:26 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-rotate/</guid>
      <description>iOS开发时经常会遇到要将某些界面强制竖屏或者横屏。要做到某个页面能强制横竖屏的前提是允许屏幕旋转，然后再在具体的界面强制横竖屏。但是要区分这个具体的界面时push还是present呈现的。 全局允许横竖屏 第一种方式，是在Target中的Ge</description>
    </item>
    
    <item>
      <title>WCDB</title>
      <link>https://iihui.github.io/post/ios-wcdb/</link>
      <pubDate>Mon, 25 May 2020 23:18:53 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-wcdb/</guid>
      <description>自定义类型入库 自定义类型要遵循ColumnCodable才能入库： enum UserOrgType: String, ColumnCodable { case CMB = &amp;#34;CMB&amp;#34; case ODC = &amp;#34;3&amp;#34; static var columnType: ColumnType = .text init(with value: FundamentalValue) { self = UserOrgType(rawValue: value.stringValue) ?? UserOrgType.CMB } func archivedValue() -&amp;gt; FundamentalValue { return FundamentalValue(self.rawValue) } } /// 查看用户表是否为空 func isEmpty() -&amp;gt; Bool { do { let count = try DBManager_V2.shared.userDb.getValue(on: UserInfoModel_V2.CodingKeys.openId.count(), fromTable: tableName).int64Value return count == 0 } catch let error { printError(msg: error.localizedDescription, type: .db) return true } }</description>
    </item>
    
    <item>
      <title>UIAlertViewController</title>
      <link>https://iihui.github.io/post/ios-alertviewcontroller/</link>
      <pubDate>Mon, 20 Apr 2020 22:58:33 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-alertviewcontroller/</guid>
      <description>最近使用UIAlertViewController时，需要定制其背景颜色，在网上找到一个解决方案，基本思路是为UIAlertViewController设置一个计算属性，这个属性改变时即将UIAlertViewController的背景色修</description>
    </item>
    
    <item>
      <title>Mach-O 文件</title>
      <link>https://iihui.github.io/post/ios-macho/</link>
      <pubDate>Wed, 01 Apr 2020 08:09:20 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-macho/</guid>
      <description>Mach-O为Mach Object文件格式的缩写，它是一种用于可执行文件、目标代码、动态库的文件格式。 文件类型 常见的MachO文件有下面这些，可以通过file+文件路径来查看文件的类型信息： 目标文件.o 库文件.a | .dylib | xxx.framework/xxx 可执行文件 符号表文件</description>
    </item>
    
    <item>
      <title>创建私有库</title>
      <link>https://iihui.github.io/post/ios-private-pods/</link>
      <pubDate>Tue, 31 Mar 2020 19:52:58 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-private-pods/</guid>
      <description>使用cocoapods可以创建远程私有库，供项目使用。首先需要在github上创建一个远程索引库，然后使用cocopods在本地创建文件夹，并与远程私有库进行关联。再在github上创建远程组件库，接着使用pod创建本地工程，然后修改组件库</description>
    </item>
    
    <item>
      <title>指定Podfile中source</title>
      <link>https://iihui.github.io/post/ios-pods-question/</link>
      <pubDate>Tue, 31 Mar 2020 08:08:00 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-pods-question/</guid>
      <description>在笔记本上安装好Cocoapods之后，执行pod install后报trunk repo update failed，解决方案是在Podfile中指定另一个源仓库。 报错信息 解决方案 解决方案是在Podfile中指定source，如下所示： platform :ios, &amp;#39;8.0&amp;#39; source &amp;#39;https://github.com/CocoaPods/Specs.git&amp;#39; use_frameworks! target &amp;#39;NewWCDB&amp;#39; do pod &amp;#39;WCDB.swift&amp;#39; end 如</description>
    </item>
    
    <item>
      <title>验证码绑定界面</title>
      <link>https://iihui.github.io/post/ios-login/</link>
      <pubDate>Sat, 28 Mar 2020 15:43:49 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-login/</guid>
      <description>验证码绑定，包括个人账户，和虚拟账户。之前写的验证码绑定界面扩展性太差，这次决定尝试使用tableView实现验证码绑定界面，主要是为了增加可扩展性，便于当需要增加新的验证信息时，可以不大动原界面。这篇文章是对应的ViewControlle</description>
    </item>
    
    <item>
      <title>AutoLayout</title>
      <link>https://iihui.github.io/post/ios-autolayout/</link>
      <pubDate>Wed, 25 Mar 2020 11:52:16 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-autolayout/</guid>
      <description>苹果公司推出的AutoLayout是一个基于约束，动态计算视图大小和位置的库。它以布局引擎系统Layout Engine为核心，采用了Cassowary布局算法，在简化布局思路的同时，还保证了布局的高效性。布局算法Cassowary能够有效解</description>
    </item>
    
    <item>
      <title>不常见的关键字</title>
      <link>https://iihui.github.io/post/ios-keywords/</link>
      <pubDate>Wed, 25 Mar 2020 10:22:29 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-keywords/</guid>
      <description>使用Swift写代码时，经常会遇到一些不常见的关键词或者常用关键词的特殊使用场景，因为比较少使用，通常这些不常见的关键词或者特殊场景很容易忘记。 便利构造函数 关键字convenience用于初始化器（构造函数）中，称之为便利初始化器（构造函数</description>
    </item>
    
    <item>
      <title>pcm No such file or directory</title>
      <link>https://iihui.github.io/post/ios-pcm-warnning/</link>
      <pubDate>Mon, 23 Mar 2020 15:15:31 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-pcm-warnning/</guid>
      <description>在封装静态framework时，在本机上没有报任何警告，在其他机器上却报warning: ***/Library/Developer/Xcode/DerivedData/ModuleCache.noindex/2MSIKR0H4Y5WQ/Foundation-A3SOD99KJ0S9.pcm: No such file or directory 警告。这篇文章就是解决这个警告问题，主要是改变工程的build setting有三个地方需要修改，暂且归为三步。 第一步 首先在Build Sett</description>
    </item>
    
    <item>
      <title>where 关键字</title>
      <link>https://iihui.github.io/post/ios-where/</link>
      <pubDate>Sat, 22 Feb 2020 20:49:20 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-where/</guid>
      <description>Swift中的where关键字主要用于限定条件，既可在switch语句中使用，也可以在for中使用，还可以用在扩展中用于限定应该遵循某种协议。 switch中 在switch语句中使用，where一般是配合if let来用于限定某些条件，例如： let</description>
    </item>
    
    <item>
      <title>Swift 方法交换中的addMethod</title>
      <link>https://iihui.github.io/post/ios-addmethod/</link>
      <pubDate>Fri, 21 Feb 2020 10:18:17 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-addmethod/</guid>
      <description>Swizzle是OC的黑魔法之一，可以在运行时对两个方法的实现进行交换，也就是s用户可以用自己的方法替换原来的方法实现，做一些其它事情。Swift也可以使用运行时的方法交换，如果要了解Swift的方法交换，首先应该了解class_addMe</description>
    </item>
    
    <item>
      <title>Any,AnyObject,AnyClass</title>
      <link>https://iihui.github.io/post/ios-any/</link>
      <pubDate>Tue, 18 Feb 2020 21:14:39 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-any/</guid>
      <description>最近在看Swift中的方法交换，遇到Any、AnyObject与AnyClass次数较多，所以在网上找了一些文章看了一下他们的区别，以此篇为记。 AnyObject AnyObject类似于OC中的id类型，表示任意的class类型。但在Swift中由于Str</description>
    </item>
    
    <item>
      <title>UIControl</title>
      <link>https://iihui.github.io/post/ios-uicontrol/</link>
      <pubDate>Fri, 14 Feb 2020 20:53:50 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-uicontrol/</guid>
      <description>UIControl是UIView的子类，也是UIResponder的子类。是UIButton，UISwitch，UITextField等控件的父类。它本身定义了一些属性和方法，但是不能直接使用。 方法交换 extension UIControl { class func swizzleMethod() { struct Static { static var token = NSUUID().uuidString } // 确保</description>
    </item>
    
    <item>
      <title>Swift 中的反射</title>
      <link>https://iihui.github.io/post/ios-reflection/</link>
      <pubDate>Fri, 14 Feb 2020 17:19:38 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-reflection/</guid>
      <description>reflection是指计算机程序在runtime时可以访问、检测和修改它本身状态或行为的一种能力。比较形象的说法就是，反射是程序在运行的时候能够观察并且修改自己的行为。 @objc Swift是一门静态语言，和OC不同，不能在运行时做很多复杂的操作。</description>
    </item>
    
    <item>
      <title>KVC 键值编码</title>
      <link>https://iihui.github.io/post/ios-kvc/</link>
      <pubDate>Thu, 13 Feb 2020 13:10:08 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-kvc/</guid>
      <description>KVC(Key Value Coding)键值编码，指允许通过Key名字来直接访问对象的属性，而不需要调用明确的存取方法。这样，便能在运行时动态地访问和修改对象的属性值。在iOS中，无论是Swift还是OC，KVC都是通过对NSObject的扩展来实现的。所以，继</description>
    </item>
    
    <item>
      <title>iOS 可视化埋点</title>
      <link>https://iihui.github.io/post/ios-log-point/</link>
      <pubDate>Sun, 09 Feb 2020 16:54:52 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-log-point/</guid>
      <description>埋点方案大体上可以归为3类：代码埋点，可视化埋点，无埋点。代码埋点，由开发人员在触发事件的具体方法里，植入多行代码把需要上传的数据发送至服务端。可视化埋点，根据标识来识别每一个事件，针对指定的事件进行取参埋点。而事件的标识与参数信息都写在配</description>
    </item>
    
    <item>
      <title>Objective-C Runtime</title>
      <link>https://iihui.github.io/post/oc-runtime/</link>
      <pubDate>Tue, 04 Feb 2020 13:15:10 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/oc-runtime/</guid>
      <description>Objective-C扩展了C语言，并加入了面向对象特性和Smalltalk式的消息传递机制。而这个扩展的核心是一个用C写的Runtime库，它是OC面向对象和动态机制的基石。OC的Runtime用于创建类对象、进行消息传递和转发。理解OC</description>
    </item>
    
    <item>
      <title>Almofire的使用</title>
      <link>https://iihui.github.io/post/ios-alamofire/</link>
      <pubDate>Sat, 28 Dec 2019 21:08:45 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-alamofire/</guid>
      <description>如果使用过OC进行开发，那么知道AFNetworking这个网络操作库。Mattt Thompson作为AFNetworking的发起人，又基于Swift语言开发了一个新的网络操作库 Alamofire。Alamofire的优雅之处在于它完完全</description>
    </item>
    
    <item>
      <title>UITableView 使用</title>
      <link>https://iihui.github.io/post/ios-uitableview/</link>
      <pubDate>Tue, 17 Dec 2019 14:08:45 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-uitableview/</guid>
      <description>在iOS开发中，UITableView的使用频率较高，这篇文章主要用于记录一些常用的使用方法和问题解决方案。 点击cell不变色 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell { let cell = tableView.dequeueReusableCell(withIdentifier: cellId, for: indexPath) as! NoteDetailInfoCell cell.selectionStyle = .none //点击该cell不变色 return cell } Cell异步更新 在UITableView</description>
    </item>
    
    <item>
      <title>Cocoapods 使用</title>
      <link>https://iihui.github.io/post/ios-cocoapods-storage/</link>
      <pubDate>Fri, 01 Mar 2019 09:34:41 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-cocoapods-storage/</guid>
      <description>放入制品库 项目需要引入百度语音合成SDK，但这个第三方库中包含的.a文件过于庞大，按规定不能直接放到代码仓库里，需要移到Cocoapods制品库中，然后再在项目中依赖这个组件。用已有的模板，只要按照要求修改对应文件，然后执行相应上传命令即可</description>
    </item>
    
    <item>
      <title>引入百度语音合成</title>
      <link>https://iihui.github.io/post/ios-synthesizer/</link>
      <pubDate>Thu, 28 Feb 2019 11:08:15 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-synthesizer/</guid>
      <description>项目中需要用百度语音合成SDK，因此自己先建了一个Demo工程作为测试，总结下来为准备--&amp;gt; 导入 --&amp;gt; 创建应用 --&amp;gt; 测试。 准备 首先从百度官网下载百度语音合成的SDK,如下图所示首先在左边选择语音合成，然后在右边选择iOS版的离在线融合SDK:</description>
    </item>
    
    <item>
      <title>半透明的悬浮提示窗</title>
      <link>https://iihui.github.io/post/ios-alert-window/</link>
      <pubDate>Sun, 24 Feb 2019 19:50:43 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-alert-window/</guid>
      <description>项目中需要一个悬浮提示窗，从网上找到一篇以OC为示例的文章，因为公司项目是Swift写的，因此需要将OC转为Swift。 OC代码 .h文件 //CustomAlertWindow.h #import &amp;lt;UIKit/UIKit.h&amp;gt; typedef NS_ENUM(NSInteger, AlertWindowPositionOption) { AlertWindowPositionTopMiddle = 0, AlertWindowPositionCenter, AlertWindowPositionBottomMiddle }; @interface CustomAlertWindow : UIWindow + (instancetype)aletWindowWithPositionOption:(AlertWindowPositionOption)positionType andInfoText:(NSString *)text; //显示 - (void)show; // 消失 - (void)dismiss; @end .m文件 //CustomAlertWindow.m #import &amp;#34;CustomAlertWindow.h&amp;#34; #define LABEL_MARGIN 10 //Label的外</description>
    </item>
    
    <item>
      <title>创建新的Target</title>
      <link>https://iihui.github.io/post/ios-new-target/</link>
      <pubDate>Thu, 10 Jan 2019 11:18:46 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-new-target/</guid>
      <description>项目需要新建一条众测流水线，因此首先需要基于DEV环境新建一个Target，然后将新建的Target配置到新建的流水线上。 Duplicate 新Target的创建一般以已有的Target为模板，如下图所示，首先选中模板Target，然后右键点击选中Dupli</description>
    </item>
    
    <item>
      <title>Swift访问权限</title>
      <link>https://iihui.github.io/post/swift-access-controller/</link>
      <pubDate>Wed, 09 Jan 2019 09:18:25 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-access-controller/</guid>
      <description>访问权限用于限制部分代码被其它源文件或者模块访问，目的是隐藏某些代码的实现细节。在Swift中可以设置类型(类、结构和枚举)的访问权限，也可以设置属性和方法的访问权限。Swift提供了5个访问级别，这些访问级别以模块和源文件为区分粒度。 模块</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://iihui.github.io/post/ios-singleton/</link>
      <pubDate>Mon, 07 Jan 2019 23:29:33 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-singleton/</guid>
      <description>单例模式(Singleton Pattern)属于创建型模式，该模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有一个单例对象被创建。 第一种方式 利用Swift中全局变量的懒加载和全局变量初始化时默认使用dispatch_once以保</description>
    </item>
    
    <item>
      <title>Swift中for循环</title>
      <link>https://iihui.github.io/post/swift-for-in/</link>
      <pubDate>Fri, 04 Jan 2019 08:16:45 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-for-in/</guid>
      <description>Swift中只有一种形式for循环，即for in。但是for-in有多种形式，既包括常规用法又包括区间循环。 常规用法 常规用法一般用于直接访问数组中的元素，可以分为直接访问和按索引访问： let arr = [34,78,789,-12] for item in arr{ print(item) } 在OC中是通过索引i来访问数组中的元</description>
    </item>
    
    <item>
      <title>Framework</title>
      <link>https://iihui.github.io/post/ios-framework/</link>
      <pubDate>Tue, 25 Dec 2018 11:45:01 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-framework/</guid>
      <description>链接库 库是一种共享程序代码的方式，分为静态库和动态库。静态库链接时被完整地拷贝到可执行文件，多次使用时就会有多个副本。 而动态库在链接时不复制，程序运行时由系统动态加载到内存，供程序调用。动态库只加载一次到内存，然后供多个程序共用，以节省内存</description>
    </item>
    
    <item>
      <title>桥接文件</title>
      <link>https://iihui.github.io/post/ios-bridge/</link>
      <pubDate>Mon, 24 Dec 2018 23:41:52 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-bridge/</guid>
      <description>因为历史原因，在使用Swift编程时，常常需要用到OC类中的方法，此时就需要使用桥接文件来引入OC中的头文件，以告诉Swift。 手动创建桥接文件 第一步 首先使用快捷键Command+N来新建一个文件： 第二步 选择Header File: 第三步 给Heade</description>
    </item>
    
    <item>
      <title>iOS 版本检查</title>
      <link>https://iihui.github.io/post/ios-new-version/</link>
      <pubDate>Thu, 20 Dec 2018 11:53:15 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-new-version/</guid>
      <description>首先由AboutViewController中的presenter调用其requestLastestVersion方法，而presenter是 AboutPresenter类的实例： lazy var presenter:AboutPresenter = AboutPresenter(delegate:self) presenter.requestLatestVersion() AboutPresenter类 而AboutPre</description>
    </item>
    
    <item>
      <title>selection 对象</title>
      <link>https://iihui.github.io/post/js-selection/</link>
      <pubDate>Mon, 17 Dec 2018 16:46:24 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/js-selection/</guid>
      <description>在富文本编辑器中，需要控制光标的各种状态信息，位置信息。浏览器提供了selection对象和range对象来操作光标。 selection Selection对象表示用户选择的文本范围或插入符号的当前位置。它代表页面中的文本选区，可能横跨多个元素(elemen</description>
    </item>
    
    <item>
      <title>KVO 介绍</title>
      <link>https://iihui.github.io/post/ios-kvo/</link>
      <pubDate>Mon, 17 Dec 2018 15:09:08 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-kvo/</guid>
      <description>在应用开发中，经常需要使用观察者模式，以监听某些对象属性的变化，然后进行相应操作。OC提供了一套简洁优雅的观察方式——KVO。KVO(key-value observing)是一种通知机制，当指定的被观察者对象的属性被修改时，KVO会自动通知</description>
    </item>
    
    <item>
      <title>RunLoop</title>
      <link>https://iihui.github.io/post/ios-runloop/</link>
      <pubDate>Fri, 14 Dec 2018 08:21:26 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-runloop/</guid>
      <description>概念 一般来讲，一个线程一次只能执行一个任务，执行完成后，线程就会退出。若我们需要一个机制，让线程能随时处理事件但并不退出，通常的代码逻辑是下面这样的： function loop() { initialize(); do { var message = get_next_message(); process_message(message); } while (message != quit); } 这种模型被称为Event Loop,实现这种模型的关键点在</description>
    </item>
    
    <item>
      <title>权限检查</title>
      <link>https://iihui.github.io/post/ios-authority/</link>
      <pubDate>Thu, 13 Dec 2018 20:25:33 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-authority/</guid>
      <description>相机权限检查 相机和音频的权限分为4种，分别是.denied,restricted,.authorized,.notDetermined,.authorized四种: .denied 未授权，用户曾经选择过拒绝授权。 .authorized 已经授权。 .restricted 未授权，例如家长控制。 .notDetermined 没有</description>
    </item>
    
    <item>
      <title>CABasicAnimation</title>
      <link>https://iihui.github.io/post/ios-animation/</link>
      <pubDate>Thu, 13 Dec 2018 10:50:31 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-animation/</guid>
      <description>关键帧动画 所谓关键帧动画，就是将Layer的属性作为KeyPath来注册，只要指定动画的起始帧和结束帧，然后自动计算和实现中间的过度的一种动画方式。 func recordingButtonAnimation(){ let animation = CABasicAnimation(keyPath: &amp;#34;opacity&amp;#34;) animation.fromValue = 1.0 animation.toValue = 0.3 animation.fillMode = kCAFillModeForwards animation.isRemovedOnCompletion = false animation.duration = self.animationDuration self.recordButton.layer.add(animation, forKey: nil) } //添加定时器 if recordingAnimationTimer == nil{ recordingAnimationTimer = Timer.scheduledTimer(timeInterval: self.animationDuration, target: self, selector: #selector(recordingButtonAnimation), userInfo:</description>
    </item>
    
    <item>
      <title>透明度渐变动画</title>
      <link>https://iihui.github.io/post/ios-opicity-animation/</link>
      <pubDate>Thu, 13 Dec 2018 10:50:31 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-opicity-animation/</guid>
      <description>CABasicAnimation关键帧动画 所谓关键帧动画，就是将Layer的属性作为KeyPath来注册，只要指定动画的起始帧和结束帧，然后自动计算和实现中间的过度的一种动画方式。 func recordingButtonAnimation(){ let animation = CABasicAnimation(keyPath: &amp;#34;opacity&amp;#34;) animation.fromValue = 1.0 animation.toValue = 0.3 animation.fillMode = kCAFillModeForwards animation.isRemovedOnCompletion = false animation.duration = self.animationDuration self.recordButton.layer.add(animation, forKey: nil) } //添加</description>
    </item>
    
    <item>
      <title>iOS视频开发入门</title>
      <link>https://iihui.github.io/post/ios-video/</link>
      <pubDate>Wed, 12 Dec 2018 10:55:40 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-video/</guid>
      <description>视频实质 纯粹的视频（不包括音频）实质上就是一组帧图片，经过视频编码成为视频(video)文件再把音频（audio）文件以及字幕文件组装在一起成为视频（movie）文件。 1秒内出现的图片数就是帧率，图片间隔越小画面就越流畅，所以帧率越高效果就</description>
    </item>
    
    <item>
      <title>OC 入门</title>
      <link>https://iihui.github.io/post/oc-tour/</link>
      <pubDate>Wed, 19 Sep 2018 14:29:51 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/oc-tour/</guid>
      <description>Objective-C简称OC， 是C语言的严格超集——任何C语言程序不经过修改都可以直接通过OC的编译器，在OC中使用C语言代码也是完全合法的。OC被描述为覆盖在C语言上的一层，因为OC的原意就是在C语言的主体上加入面向对象的特性。 文件扩展</description>
    </item>
    
    <item>
      <title>swift中的方法</title>
      <link>https://iihui.github.io/post/swift-method/</link>
      <pubDate>Fri, 14 Sep 2018 09:31:40 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-method/</guid>
      <description>在Swift中方法是关联了特定类型的函数。类，结构体，枚举类型都能定义实例方法，方法封装了给定类型特定的任务和功能。 实例方法 实例方法是属于特定实例（类实例、结构体实例或者枚举实例）的函数。实例方法只能在类型的具体实例里被调用，不能独立于实例</description>
    </item>
    
  </channel>
</rss>
